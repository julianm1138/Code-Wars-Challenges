Given an input of an array of digits, return the array with each digit incremented by its position in the array: the first digit will be incremented by 1, the second digit by 2, etc. Make sure to start counting your positions from 1 ( and not 0 ).

Your result can only contain single digit numbers, so if adding a digit with its position gives you a multiple-digit number, only the last digit of the number should be returned.



// We can solve this by returning empty vector for empty inputs, then take each number in the array slice and add index + 1 to get the correct position.
// That number % 10 will always give us the last digit of any integer. 



fn incrementer(nums: &[u32]) -> Vec<u32> {
       
    if nums.len() == 0 { return vec![] }
    
    nums.into_iter().enumerate()
    .map(|(index, &num)| {
        (num + (index as u32 + 1)) % 10})
    .collect()
}
