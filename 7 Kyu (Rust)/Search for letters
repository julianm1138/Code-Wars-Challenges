Create a function which accepts one arbitrary string as an argument, and return a string of length 26.

The objective is to set each of the 26 characters of the output string to either '1' or '0' based on the fact whether the Nth letter of the alphabet is present in the input (independent of its case).

So if an 'a' or an 'A' appears anywhere in the input string (any number of times), set the first character of the output string to '1', otherwise to '0'. if 'b' or 'B' appears in the string, set the second character to '1', and so on for the rest of the alphabet.


// There are 26 characters for the output string which coincide with 26 letters of the alphabet.
// We can solve this by filling an array with 26 '0's and if the character is a letter, we can get its position in the alphabet by subtracting 97 from its u8 value.
// Assign '1' to the index in the array.
// All non-letters will still be '0'.


fn change(string: &str) -> String {
    
    let mut result: [char; 26] = ['0'; 26];
    
    for c in string.chars() {
        
      if c.is_alphabetic() {
          let index = (c.to_ascii_lowercase() as u8) - 97;
          result[index as usize] = '1';  
        } 
    } 
    result.iter().collect::<String>()
}
