Find the last element of the given argument(s). If a single argument is passed and is a list/array or a string, return its last element. It is guaranteed that there will be at least one argument and that single-argument arrays/lists/strings will not be empty.


// We can solve this by using the last() method to get the last element on the reference.


fn last<T: Clone>(slice: &[T]) -> T {     // input must implement the Clone trait and return the owned type 
    
   slice.last().cloned().unwrap()       // get the last element, clone it to fulfill Clone trait implementation and unwrap to return the owned type
}
