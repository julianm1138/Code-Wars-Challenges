Write a generic function chainer that takes a starting value, and an array of functions to execute on it (array of symbols for Ruby).

The input for each function is the output of the previous function (except the first function, which takes the starting value as its input). Return the final value after execution is complete.

// We can solve this with fold(). 


fn chain<F: Fn(i32)->i32>(input: i32, functions: &[F]) -> i32 {

   functions.iter().fold(input, |acc, f| f(acc))     // use the input as the starting value, accumulate the results of the functions, acc will return i32 because fold returns the final value of the acc.
}
