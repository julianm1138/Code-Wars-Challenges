Your task is to split the chocolate bar of given dimension n x m into small squares. Each square is of size 1x1 and unbreakable. Implement a function that will return minimum number of breaks needed.

For example if you are given a chocolate bar of size 2 x 1 you can split it to single squares in just one break, but for size 3 x 1 you must do two breaks.

If input data is invalid you should return 0 (as in no breaks are needed if we do not have any chocolate to split). Input will always be a non-negative integer.

// We can solve this by multiplying n and m as u64 and using saturating_sub method to prevent unexpected results due to the expression evaluating to 0.




fn break_chocolate(n: u32, m: u32) -> u64 {

   (n as u64 * m as u64).saturating_sub(1)      //if the value causes underflow (due to becoming a negative number) return 0
    
 }
