Your task is to write a function which returns the sum of a sequence of integers.

The sequence is defined by 3 non-negative values: begin, end, step.

If begin value is greater than the end, your function should return 0. If end is not the result of an integer number of steps, then don't add it to the sum. See the 4th example below.


// We can solve this by creating a loop where while the start value is less than or equal to the end value we add the step to the start value.
// Make a sum variable to accumulate the current value of each iteration.





fn sequence_sum(start: u32, end: u32, step: u32) -> u32 {
    
    if start > end {
        return 0;
    }
    
    let mut sum = 0;
    let mut current = start;
    
    
    while current <= end {
        
      sum += current;
      current += step;
    }
    
     sum    
}
