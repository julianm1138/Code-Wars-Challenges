Create a function named divisors/Divisors that takes an integer n > 1 and returns an array with all of the integer's divisors(except for 1 and the number itself), from smallest to largest. 
If the number is prime return the string '(integer) is prime' (null in C#, empty table in COBOL) (use Either String a in Haskell and Result<Vec<u32>, String> in Rust).

Example:
divisors(12); // should return [2,3,4,6]
divisors(25); // should return [5]
divisors(13); // should return "13 is prime"

//We know we need to return an array of all numbers that are not 1 and not the input integer itself that go into the integer without a remainder.
//We can iterate from 1 to the integer and set up an if statement for all these conditions and push each result to an empty array. 
//If the array is empty, it means the integer meets none of the conditions, which means it must be a prime number.




function divisors(integer) {
 
  let arr = [];
  
  for (let i = 1; i <= integer; i++){
    if(i !== 1 && i !== integer && integer % i === 0){
      arr.push(i);
    }
  }
  
  
  if(arr.length === 0) {
      return `${integer} is prime`
 }
  return arr;
}
console.log(divisors(15))
