Create a function that returns the sum of the two lowest positive numbers given an array of minimum 4 positive integers. No floats or non-positive integers will be passed.

For example, when an array is passed like [19, 5, 42, 2, 77], the output should be 7.

[10, 343445353, 3453445, 3453545353453] should return 3453455.


//We know we need the minimum value in the array and then the next minimum value after that and add them together. 
//My first thought was to use filter for both the minimum and second minimum value, but it returns an array which leads to more steps. 
//Instead we can opt for finding the min value with Math.min() and .apply()
//For the second min value we can use filter to get every element except the min value and then find the min value out of that array. 



 function sumTwoSmallestNumbers(numbers) {  
  const leastValue = Math.min.apply(null, numbers);
  const arr = numbers.filter(element => element !== leastValue);
  const secondLeastValue = Math.min.apply(null, arr);
  
  console.log('The second least value:', secondLeastValue);
  console.log('The least value:', leastValue);
  
  return secondLeastValue + leastValue; 
}

console.log(sumTwoSmallestNumbers([1, 2, 3, 4])); // Output: 3

//There is also a cleaner way to solve it where you can sort the array from least to greatest and then extract the smallest and second smallest value with indexing.


function sumTwoSmallestNumbers(numbers){  
  numbers = numbers.sort(function(a, b){return a - b; });
  console.log(numbers)
  console.log(`${numbers[0]} + ${numbers[1]} is:`)
  return numbers[0] + numbers[1];
  
};

console.log(sumTwoSmallestNumbers([1, 2, 3, 4])); // Output: 3


