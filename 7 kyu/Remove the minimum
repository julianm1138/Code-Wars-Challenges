Given an array of integers, remove the smallest value. Do not mutate the original array/list. If there are multiple elements with the same value, remove the one with the lowest index. If you get an empty array/list, return an empty array/list.

Don't change the order of the elements that are left.


//We know we need to remove the minimum value from the array, and if there are duplicates of the min value, remove the one at the lowest index.
//We take care of the array length === 0 condition first.
//Then we find the minimum number and the minimum number's index so that we can access it in the array later.
//Now we have our minimum value and its index and we can set up our main condition that will create our unmutated array. 
//We make a for loop where i represents indices and iterate through the length of the array. 
//If i is not equal to minIndex, we push the value to the empty array. That effectively means that if the current number is not equal to our minimum number, add it to the array. 
//And since we are using the minIndex, we can be sure that the duplicate removed is the one at the lowest index. 





function removeSmallest(arr) {

  if (arr.length === 0) {
    return [];
  }
  
  let min = arr[0];         
  let minIndex = 0;
  
  for (let i = 1; i < arr.length; i++) { 
    if (arr[i] < min) {         //If the current number is smaller than the starting number, that means it must be the new min. 
      min = arr[i];
      minIndex = i;              //this will get updated to be the correct minIndex based on the condition arr[i] < min. 
    }
  }
 
  const result = [];
  for (let i = 0; i < arr.length; i++) {
    if (i !== minIndex) {
      result.push(arr[i]);
    }
  }
  
  return result;
}

console.log(removeSmallest([1, 2, 3, 4, 5])); 
console.log(removeSmallest([5, 3, 2, 1, 4])); 
console.log(removeSmallest([2, 2, 1, 2, 1])); 
