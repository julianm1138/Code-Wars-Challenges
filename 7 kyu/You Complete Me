Task: concatenate one or more letters to the end of a given input string to create a string that reads the same forward as backward.

Specifications

Letters can only be added to the right hand side of the input string.

You are required to add at least one letter to the input string.

The shorter return string is the correct one. ie.. (ab)=> abba is Wrong, while (ab)=> aba is Right.

Inputs will consist of one or more letters, upper and lower case.

Strings are case sensitive. ie..(Gn)=> gng is Wrong, while (Gn)=> GnG is right.

Examples:

(a) => a + a => aa

(GG) => GG + G => GGG

(Ab) => Ab + A => AbA

(aba) => aba + ba => ababa

(aab) => aab + aa => aabaa



//The first time I read the directions for "reads the same forward as backward" palindrome jumped out at me, so I knew we would need to implement a palindrome in the solution. 
//Loop through the string 
//Create a conditional if the str at (i) is a palindrome, return the str concatenated with the substring str.slice(i), rerverse it and join it, and that passes the tests. 

const complete = str =>{
  for (let i = 1; i <= str.length; i++) {
    if (str.slice(i) == [...str.slice(i)].reverse().join(''))
    return str + [...str.slice(0,i)].reverse().join('')
  }
} 


