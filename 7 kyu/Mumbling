This time no story, no theory. The examples below show you how to write function accum:

Examples:
accum("abcd") -> "A-Bb-Ccc-Dddd"
accum("RqaEzty") -> "R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy"
accum("cwAt") -> "C-Ww-Aaa-Tttt"
The parameter of accum is a string which includes only letters from a..z and A..Z.


//We know we have to output a string with groups of each character in the string, where the placement/index of the character says how many times we need to repeat each character. 
//For example if the first character is A repeat A once, if it's B, repeat B twice, if C repeat C three times.
//Not only that, but the following characters after the first must be lowercase, and then joined together with hyphens. 

//We know we can't manipulate the input very conveniently if it's not an array, so we split it into an array of characters, and we know each first character is uppercase so we use toUpperCase().split() chained together.
//We need to iterate over each character and concatenate each of those upper case characters with the number of times they repeat based on the index.
//Finally, we can use template literals to concatenate everything we need together, and then join() with hyphens.

function accum(s) {
  
	s = s.toUpperCase().split('');
  console.log(s)
  
  const result = s.map((element, index) => {
    return (`${element}${element.toLowerCase().repeat(index)}`)});
    return result.join('-');
}
