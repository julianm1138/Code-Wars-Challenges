Given an array of numbers, return a string made up of four parts:

a four character 'word', made up of the characters derived from the first two and last two numbers in the array. order should be as read left to right (first, second, second last, last),

the same as above, post sorting the array into ascending order,

the same as above, post sorting the array into descending order,

the same as above, post converting the array into ASCII characters and sorting alphabetically.

The four parts should form a single string, each part separated by a hyphen (-).

Example format of solution: "asdf-tyui-ujng-wedg"


// We can solve this by creating instances of the default and sorted arrays and converting all the integers into characters.
// We can use a helper function for this.
// Finally, create an array with the corresponding parts and join with hyphens.

function sortTransform(a) {
  const arrLength = a.length;
  
  const convertToChars = (arr) => {
    return [
      String.fromCharCode(arr[0]),
      String.fromCharCode(arr[1]),
      String.fromCharCode(arr[arrLength - 2]),
      String.fromCharCode(arr[arrLength - 1]),
    ];
  };

  const sortedAscending = [...a].sort((a, b) => a - b);
  const sortedDescending = [...a].sort((a, b) => b - a);

  const firstPart = convertToChars(a);
  const secondPart = convertToChars(sortedAscending);
  const thirdPart = convertToChars(sortedDescending);

  const result = [firstPart, secondPart, thirdPart, secondPart].map(subArr => subArr.join(''));

  return result.join('-');
}

console.log(sortTransform([111, 112, 113, 114, 115, 113, 114, 110]));
