You are given two arrays a1 and a2 of strings. Each string is composed with letters from a to z. Let x be any string in the first array and y be any string in the second array.

Find max(abs(length(x) âˆ’ length(y)))

If a1 and/or a2 are empty return -1 in each language except in Haskell (F#) where you will return Nothing (None).

Example:
a1 = ["hoqq", "bbllkw", "oox", "ejjuyyy", "plmiis", "xxxzgpsssa", "xxwwkktt", "znnnnfqknaz", "qqquuhii", "dvvvwz"]
a2 = ["cccooommaaqqoxii", "gggqaffhhh", "tttoowwwmmww"]
mxdiflg(a1, a2) --> 13

//We need to find the maximum value of every combination of the string lengths' max values and min values in array 1 and array 2.
//First we account for empty arrays.
//We can use map to get the length of each element in the arrays and Math.max and Math.min to get the variables we need to do our computations. 
//Then we can return the Max value of all of the combinations of differences.



function mxdiflg(a1, a2) {
  if (a1.length === 0 || a2.length === 0) {
    return -1;
  }

  const maxArr1 = Math.max(...a1.map(element => element.length));
  const minArr1 = Math.min(...a1.map(element => element.length));
  const maxArr2 = Math.max(...a2.map(element => element.length));
  const minArr2 = Math.min(...a2.map(element => element.length));

  return Math.max(
    Math.abs(maxArr1 - maxArr2),
    Math.abs(minArr1 - minArr2),
    Math.abs(maxArr1 - minArr2),
    Math.abs(maxArr2 - minArr1)
  );
}
