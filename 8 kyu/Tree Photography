A tree is hidden if it is shorter than or the same height as a ( any ) tree in front of it, as seen in a particular direction.

Given a list of tree heights, create a function which returns "left" or "right", depending on which side allows me to see as many trees as possible.

Worked Example
[1, 3, 1, 6, 5] ➞ "left"
// If I stand on the left, I can see trees of heights 1, 3 and 6.
// If I stand on the right, I can see trees of heights 5 and 6.
// Return "left" because I would see more trees.
Examples
[5, 6, 5, 4] ➞ "right"

[1, 2, 3, 3, 3, 3, 3] ➞ "left"

[3, 1, 4, 1, 5, 9, 2, 6] ➞ "left"
Notes
There will always be a best side.


//input is array of numbers
/*condition: tree is hidden if shorter than or the same height
(less than or equal to the same height as any tree in front of it)*/
//output is a string 'left' or 'right'

//the greatest value in the array is the stop point or the reference point
//sort from least to greatest, remove duplicates until the greatest value 
//compare array lengths and return the subsequent string






function treePhotography(trees) {
  const maxValue = trees.indexOf(Math.max(...trees));

  const leftArr = [];
  const rightArr = [];

  // Collect values from the start of the array until the largest value
  for (let i = 0; i <= maxValue; i++) {
    leftArr.push(trees[i]);
  }

// Remove duplicates and sort the left array
  const uniqueLeftArr = Array.from(new Set(leftArr.sort((a, b) => a - b)));

  // Collect values from the end of the array until the largest value
  for (let i = trees.length - 1; i >= maxValue; i--) {
    rightArr.push(trees[i]);
  }

  // Remove duplicates and sort the right array
  const uniqueRightArr = Array.from(new Set(rightArr.sort((a, b) => a - b)));

  // Check the lengths and return the result
  if (uniqueLeftArr.length < uniqueRightArr.length) {
    return "right";
  } else {
    return "left";
  }
}

