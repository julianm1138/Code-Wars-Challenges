In this kata you're expected to sort an array of 32-bit integers in ascending order of the number of on bits they have.

E.g Given the array [7, 6, 15, 8]

7 has 3 on bits (000...0111)
6 has 2 on bits (000...0110)
15 has 4 on bits (000...1111)
8 has 1 on bit (000...1000)
So the array in sorted order would be [8, 6, 7, 15].

In cases where two numbers have the same number of bits, compare their real values instead.

E.g between 10 (...1010) and 12 (...1100), they both have the same number of on bits '2' but the integer 10 is less than 12 so it comes first in sorted order.

Your task is to write a function that takes an array of integers and sort them as described above.

Note: your solution has to sort the array in place.

Example:

[3, 8, 3, 6, 5, 7, 9, 1]   =>    [1, 8, 3, 3, 5, 6, 9, 7]


//We could solve this with an object to store each number and bitCount as key-value pairs, but since we have to sort the array in place we'll use sort().
//Convert each number in the array as you sort through it to binary.
//Split at every '1', which should create an array of substrings of 0's and empty strings for every '1' in the array. So if we substract arr.length - 1 we will get the count of on bits.
//Now we can sort the array of on-bit (1's) counts.
//If the on bit count of a is equal to the on bit count of b, return the a, b (the original numbers) in ascending order.
//Else return the count of on bints in ascending order. 


function sortByBit(arr) {

  arr.sort((a, b) => {
    const bitCountA = a.toString(2).split('1').length - 1;
    const bitCountB = b.toString(2).split('1').length - 1;
    
    if (bitCountA === bitCountB) return a - b;
    return bitCountA - bitCountB;
    
  });
 
  return arr;
}
