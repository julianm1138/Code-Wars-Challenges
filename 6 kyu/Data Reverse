A stream of data is received and needs to be reversed.

Each segment is 8 bits long, meaning the order of these segments needs to be reversed, for example:

11111111  00000000  00001111  10101010
 (byte1)   (byte2)   (byte3)   (byte4)
should become:

10101010  00001111  00000000  11111111
 (byte4)   (byte3)   (byte2)   (byte1)


//We can solve this by loop through the array and creating subgroups of 8 elements at a time, pushing to an empty array, and reversing it.
//First define a for loop for the input and iterate 8 at a time and use silce to go from 0 to the 8th element and push to the array.
//Slice creates an array for each group so we need to reverse and flatten to get the desired output. 


function dataReverse(data) {
  
  let bytes = [];
 
  for (let i = 0; i < data.length; i += 8) {
    bytes.push(data.slice(i, i + 8));
}
  return bytes.reverse().flat();
  }
console.log(dataReverse([1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,0,1,0]))
