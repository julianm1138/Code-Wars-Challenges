Given a lowercase string that has alphabetic characters only and no spaces, return the highest value of consonant substrings. Consonants are any letters of the alphabet except "aeiou".

We shall assign the following values: a = 1, b = 2, c = 3, .... z = 26.

For example, for the word "zodiacs", let's cross out the vowels. 


//We can solve this by using Math.max to compare the current sum to the max sum.
//Loop through the string and check if the current character includes a vowel. If it doesn't, add the value to the current sum. This process should keep going as long as there are no vowels so the values should accumulate in the currentSum.
//Else we reset the currentSum to be 0 to restart the sum of each consecutive value.
//The maxSum should be updated to the greatest currentSum.




function solve(s) {
  
 const vowels = 'aeiou';
  
 let maxSum = 0;
 let currentSum = 0;
  
  for (let i = 0; i < s.length; i++) {
    if (!vowels.includes(s[i])) {
      currentSum += s[i].charCodeAt() - 96;
      maxSum = Math.max(maxSum, currentSum);
    } else {
    currentSum = 0;
  }
}
  return maxSum;
}
console.log(solve("zodiacs"))
