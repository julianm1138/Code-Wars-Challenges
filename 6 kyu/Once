You'll implement once, a function that takes another function as an argument, and returns a new version of that function that can only be called once.

Subsequent calls to the resulting function should have no effect (and should return undefined).

For example:

logOnce = once(console.log)
logOnce("foo") // -> "foo"
logOnce("bar") // -> no effect

// We can solve this by creating a flag that switches boolean state when fn is called.
// Use a wrapper function to create a closure and preserve the state of the variable 'called' across function calls.
// Return fn with its original arguments. 


function once(fn) {
  
  let called = false;
  
  return (...args) => {
     if (called === false) {
    called = true;
    return fn(...args);
  }
 }
}
