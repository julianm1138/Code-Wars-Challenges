Create a function taking a positive integer between 1 and 3999 (both included) as its parameter and returning a string containing the Roman Numeral representation of that integer.

//We can solve this by creating an object of roman numeral key-value pairs and looping through the keys.
//While the number is greater than or equal to any key's value, we add the key to an empty string. 
//Since roman numeral depend on using a base symbol of larger value and then adding smaller values, we can use concatenation with the empty string to form our roman numerals.
//We subtract the input from that smybol's value and eventually the loop will meet all conditions, because the input value will drop to 0. 






function solution(number){
   
 const romanNumerals = {
    M: 1000,
    CM: 900,
    D: 500,
    CD: 400,
    C: 100,
    XC: 90,
    L: 50,
    XL: 40,
    X: 10,
    IX: 9,
    V: 5,
    IV: 4,
    I: 1,
  };
  
  let result = '';
  
  for (const symbol in romanNumerals) {
    
    while(number >= romanNumerals[symbol]) {
      result += symbol;
      number -= romanNumerals[symbol];
    }
  }
 return result;
}
console.log(solution(1))
