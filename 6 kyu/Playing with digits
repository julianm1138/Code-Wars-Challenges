Given two positive integers n and p, we want to find a positive integer k, if it exists, such that the sum of the digits of n raised to consecutive powers starting from p is equal to k * n.

//We can solve this by getting the sum of the digits with consecutive powers of p and checking if the sum is divisble by n return the sum / n, else return -1.



function digPow(n, p){

  const strArr = n.toString().split('');
  
  const numArr = strArr.map((element) => +element);
  
  let sum = 0;
    
  for (let i = 0; i < numArr.length; i++){
    
  sum += numArr[i] ** (p + i);
}
  if (sum % n === 0){
    return sum / n;
  } else {
    return -1;
  }
}
console.log(digPow(89, 1))


