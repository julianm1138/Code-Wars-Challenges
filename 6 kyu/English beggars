your task here is pretty simple: given an array of values and an amount of beggars, you are supposed to return an array with the sum of what each beggar brings home, assuming they all take regular turns, from the first to the last.

For example: [1,2,3,4,5] for 2 beggars will return a result of [9,6], as the first one takes [1,3,5], the second collects [2,4].

The same array with 3 beggars would have in turn have produced a better out come for the second beggar: [5,7,3], as they will respectively take [1,4], [2,5] and [3].

//We can solve this by initializing an empty array with 0's and get the sum of each beggar.
//Each beggar is an element in the result array. 
//If we use i % n for result array, it will alternate through the elements of the array and if it reaches the end, it will always go back to the beginning and continue for the length of the values array. We can use this property to simulate the beggers taking turns to get their values.
//Then we can loop through all the values and assign each beggar a value and thanks to i % n, the values will continue to sum up even if the length of the values array exceeds the length of the result array.




function beggars(values, n) {
  
 let result = Array(n).fill(0);
  
    for (let i = 0; i < values.length; i++) {
      result[i % n] += values[i];
  }
  return result;
}
console.log(beggars([1,2,3,4,5],3))
