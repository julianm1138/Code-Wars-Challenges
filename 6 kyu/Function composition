Combining functions like this is called function composition. Functional programming libraries in Javascript such as Ramda include a generic compose function which does the heavy lifting of combining functions for you. So you could implement addOneMultTwo as follows:

const addOneMultTwo = compose(multTwo, addOne)

addOneMultTwo(5) // returns 12
A simple implementation of compose, could work as follows:

const compose = (f, g) => (a) => f(g(a))
The arguments f and g are unary functions (i.e. functions which take one argument). The problem with this compose function is that it only composes two functions. Your task is to write a compose function which can compose any number of functions together.

//We can solve this using reduceRight.
//We can tell that an outer argument is passed into the composition of n functions.
//Since we are inputting n functions we use spread operator which should turn it into an array of functions.
//Then we define the outer argument/function and since we want to apply the outer argument to the array of functions starting from the innermost function, we can use reduceRight.
//The accumulator will be the initial argument, and we will take the current function and pass the accumulator into it. 
//This should pass the outer argument through every function in the array starting from the right-most/inner-most function. 


function compose(...args) {
 
  return (arg) => args.reduceRight((acc, currentFunction) => currentFunction(acc), arg);

}
