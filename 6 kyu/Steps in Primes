The prime numbers are not regularly spaced. For example from 2 to 3 the step is 1. From 3 to 5 the step is 2. From 7 to 11 it is 4. Between 2 and 50 we have the following pairs of 2-steps primes:

3, 5 - 5, 7, - 11, 13, - 17, 19, - 29, 31, - 41, 43

We will write a function step with parameters:

g (integer >= 2) which indicates the step we are looking for,

m (integer >= 2) which gives the start of the search (m inclusive),

n (integer >= m) which gives the end of the search (n inclusive)

In the example above step(2, 2, 50) will return [3, 5] which is the first pair between 2 and 50 with a 2-steps.

So this function should return the first pair of the two prime numbers spaced with a step of g between the limits m, n if these g-steps prime numbers exist otherwise nil or null or None or Nothing or [] or "0, 0" or {0, 0} or 0 0 or "" (depending on the language).

Examples:
step(2, 5, 7) --> [5, 7] or (5, 7) or {5, 7} or "5 7"

step(2, 5, 5) --> nil or ... or [] in Ocaml or {0, 0} in C++

step(4, 130, 200) --> [163, 167] or (163, 167) or {163, 167}


//We can solve this by creating a helper function to check for prime numbers, looping through m and n and checking if the current number and the current number added to the step are prime. If yes, return those two in an array.
// After the loop completes, return null in all other cases. This is to make sure the loop search all possible number pairs for a match before returning null, because the first n pairs may not match, but some pair within the range may match. 


function step(g, m, n) {
    
  function checkPrime(num) {
    if (num < 2) return false;
     
    for (let i = 2; i <= Math.sqrt(num); i++) {
      if (num % i === 0) {
        return false;
      }
    }
    return true;
  }
  
  for (let i = m; i <= n; i++) {
    if (checkPrime(i) && checkPrime(i + g) === true) {
     return [i, i + g];
    }
  }
  return null;
}

