Linked Lists - Length & Count

Implement length() to count the number of nodes in a linked list.

length(null) => 0
length(1 -> 2 -> 3 -> null) => 3


Implement Count() to count the occurrences of an integer in a linked list.

count(null, 1) => 0
count(1 -> 2 -> 3 -> null, 1) => 1
count(1 -> 1 -> 1 -> 2 -> 2 -> 2 -> 2 -> 3 -> 3 -> null, 2) => 4

//We can solve this by creating one function to count the number of nodes in the linked list and one function to count the occurences of a target in a linked list.
//First, we can tell in the examples that if the argument is null, then the loop exits. Therefore, to implement the length function, we can check while the head is not null, increment the count by 1 and reassign head to the next node.
//Then to implement count we can do the same loop but this time check if head.data (the integer inside each node) is the target, increment the count, and go to the next node.



function Node(data) {
  this.data = data;
  this.next = null;
}

function length(head) {
   
  let nodeCount = 0;
  
  while (head !== null) {
    nodeCount++;
    head = head.next;
  }
  return nodeCount;
}

function count(head, target) {
   
  let count = 0;
  
  while (head !== null) {
    
    if (head.data === target) {
      count++;
    }
    head = head.next;
    }
  return count;
  }
