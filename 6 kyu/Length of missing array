You get an array of arrays.
If you sort the arrays by their length, you will see, that their length-values are consecutive.
But one array is missing!


You have to write a method, that return the length of the missing array.

Example:
[[1, 2], [4, 5, 1, 1], [1], [5, 6, 7, 8, 9]] --> 3

If the array of arrays is null/nil or empty, the method should return 0.

When an array in the array is null or empty, the method should return 0 too!


//We can solve this by checking for null or empty arrays and then creating logic to return the next number in the missing length sequence.
//We create a new sorted array of the lengths.
//Iterate through the array.length - 1 to stay within bounds.
// sortedArr[i] + 1 gives us the next element in the sequence, so if the next element after the current element minus the current element > 1 then that means the value is missing. So return sortedArr[i] + 1.


function getLengthOfMissingArray(arrayOfArrays) {  
  
  if (!Array.isArray(arrayOfArrays) || arrayOfArrays.length === 0 ) {
    return 0;
  }
  
  if (arrayOfArrays.some(array => !Array.isArray(array) || array.length === 0)){
      return 0;
    }
  
  const sortedArr = arrayOfArrays.map(array => array.length).sort((a, b) => a - b);
 
  for (let i = 0; i < sortedArr.length - 1; i++) {
   
    if (sortedArr[i + 1] - sortedArr[i] > 1) {
      return sortedArr[i] + 1;
      } 
    }
  }
