Backwards Read Primes are primes that when read backwards in base 10 (from right to left) are a different prime. (This rules out primes which are palindromes.)

Examples:
13 17 31 37 71 73 are Backwards Read Primes
13 is such because it's prime and read from right to left writes 31 which is prime too. Same for the others.

Task
Find all Backwards Read Primes between two positive given numbers (both inclusive), the second one always being greater than or equal to the first one. The resulting array or the resulting string will be ordered following the natural order of the prime numbers.

Examples (in general form):
backwardsPrime(2, 100) => [13, 17, 31, 37, 71, 73, 79, 97] backwardsPrime(9900, 10000) => [9923, 9931, 9941, 9967] backwardsPrime(501, 599) => []

//We can solve this by creating two helper functions to check if the number is a palindrome and to check if a number is prime.
//Loop through the range inclusive.
//If the number passes the tests continue to reverse it and check if the reversed number is also prime.
//If true, push to result array. 





function backwardsPrime(start, stop){
  
  let result = [];
  
  for (let i = start; i <= stop; i++) {
    
    if (isPrime(i) && !isPalindrome(i)) {
      let reversedNum = i.toString().split('').reverse().join('');
    reversedNum = parseFloat(reversedNum);
    if (isPrime(reversedNum)) {
      result.push(i)
    }
  }
} 
    return result;
    
  
  function isPrime(number)  {
    if (number <= 1) return false;
    
    for (let i = 2; i <= Math.sqrt(number); i++) {
      if (number % i === 0) {   //if it has positive divisors other than one and itself 
        return false;
      }
    }
    return true;
  }

  function isPalindrome(number) {
    let reversedNum = number.toString().split('').reverse().join('');
    return parseFloat(reversedNum) === number;
  }
}
console.log(backwardsPrime(2, 100))
