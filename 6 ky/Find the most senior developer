You will be given a sequence of objects representing data about developers who have signed up to attend the next coding meetup that you are organising.

Your task is to return a sequence which includes the developer who is the oldest. In case of a tie, include all same-age senior developers listed in the same order as they appeared in the original input array.

For example, given the following input array:

var list1 = [
  { firstName: 'Gabriel', lastName: 'X.', country: 'Monaco', continent: 'Europe', age: 49, language: 'PHP' },
  { firstName: 'Odval', lastName: 'F.', country: 'Mongolia', continent: 'Asia', age: 38, language: 'Python' },
  { firstName: 'Emilija', lastName: 'S.', country: 'Lithuania', continent: 'Europe', age: 19, language: 'Python' },
  { firstName: 'Sou', lastName: 'B.', country: 'Japan', continent: 'Asia', age: 49, language: 'PHP' },
];
your function should return the following array:

[
  { firstName: 'Gabriel', lastName: 'X.', country: 'Monaco', continent: 'Europe', age: 49, language: 'PHP' },
  { firstName: 'Sou', lastName: 'B.', country: 'Japan', continent: 'Asia', age: 49, language: 'PHP' },
]


// We can solve this by using an array to hold all the ages, then get the Math.max of the ages, finally check if each age is equal to the max value of the ages, if so, push to the result.



function findSenior(list) {
  
  let ages = [];
  let result = [];
  
  for (let i = 0; i < list.length; i++) {
       ages.push(list[i].age);
     }  
  
  for (let i = 0; i < list.length; i++) {
     if (list[i].age === Math.max(...ages)) {
        result.push(list[i]);
    }
  }
    return result;
  
  }
